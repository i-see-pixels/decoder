[{"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\index.js":"1","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\category\\CategoryA.js":"2","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\category\\CategoryB.js":"3","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\Home.js":"4","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\CreatePost.js":"5","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\Signup.js":"6","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\Navbar.js":"7","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\ViewPost.js":"8","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\App.js":"9","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\Signin.js":"10","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\ForkedPost.js":"11","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\Reducer.js":"12"},{"size":506,"mtime":1606589227785,"results":"13","hashOfConfig":"14"},{"size":7104,"mtime":1607062150766,"results":"15","hashOfConfig":"14"},{"size":7104,"mtime":1607065851807,"results":"16","hashOfConfig":"14"},{"size":11781,"mtime":1607493700714,"results":"17","hashOfConfig":"14"},{"size":3092,"mtime":1607002844036,"results":"18","hashOfConfig":"14"},{"size":2859,"mtime":1607538704335,"results":"19","hashOfConfig":"14"},{"size":4803,"mtime":1607423218473,"results":"20","hashOfConfig":"14"},{"size":2067,"mtime":1607337870922,"results":"21","hashOfConfig":"14"},{"size":2373,"mtime":1607413864820,"results":"22","hashOfConfig":"14"},{"size":2713,"mtime":1607409925154,"results":"23","hashOfConfig":"14"},{"size":3635,"mtime":1607493691710,"results":"24","hashOfConfig":"14"},{"size":407,"mtime":1607428250779,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1nf1v4q",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\index.js",[],["59","60"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\category\\CategoryA.js",["61"],"import react, { useEffect, useState } from 'react';\r\n\r\nfunction CategoryA()\r\n{\r\n    const [allThePosts,setAllThePosts]=useState([]);\r\n    const categoryName=\"A\";\r\n\r\n    useEffect(()=>{\r\n        fetch(`/allposts/${categoryName}`,{\r\n            method:\"get\",\r\n            headers:{\r\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \r\n            }\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data)\r\n            setAllThePosts(data)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    },[])\r\n\r\n    function LikePost(postId)\r\n    {\r\n        fetch('/likepost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n            const newData=allThePosts.map(item=>{\r\n                if(item._id === data._id)\r\n                    return data;\r\n                else   \r\n                    return item;\r\n            })\r\n\r\n            setAllThePosts(newData);\r\n            // flag+=1;\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function UnlikePost(postId)\r\n    {\r\n        fetch('/unlikepost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n            // flag+=1;\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function DeletePost(postId)\r\n    {\r\n        fetch(`/delete/${postId}`,{\r\n            method:\"delete\",\r\n            headers:{\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data)\r\n            const newData=allThePosts.map(item=>{\r\n                    if(item._id !== data._id)\r\n                        return item\r\n                    return data\r\n            })\r\n            setAllThePosts(newData);\r\n            // flag+=1;\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function makeComment(comment,postId)\r\n    {\r\n        fetch('/comment',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                commentBody:comment,\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            // console.log(data);\r\n            const newData=allThePosts.map(item=>{\r\n                if(item._id === data._id)\r\n                    return data\r\n                else    \r\n                    return item\r\n            })\r\n            setAllThePosts(newData)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    function ForkPost(postId)\r\n    {\r\n        fetch('/forkpost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>this is Category A</h1>\r\n            {\r\n                allThePosts.map(item=>{\r\n                    // console.log(\"alltheposts\");\r\n                    // console.log(item)\r\n                    return(\r\n                        // <li><h2>{item.title}</h2></li>\r\n                        // <li><h2>{item.body}</h2></li>\r\n                        <div className=\"card\">\r\n                            <h2>{item.title}</h2>\r\n                            <h2>{item.body}</h2>\r\n                            <h4>{item.likes.length} likes</h4>\r\n\r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                LikePost(item._id)\r\n                            }}\r\n                            >Like</button>\r\n\r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                UnlikePost(item._id)\r\n                            }}\r\n                            >Unlike</button>\r\n                            \r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                DeletePost(item._id)\r\n                            }}\r\n                            >Delete</button>\r\n                            \r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                ForkPost(item._id)\r\n                            }}\r\n                            >Fork</button>\r\n\r\n                            <h4>Previous Comments</h4>\r\n                            <div>\r\n                                {\r\n                                    item.comments.map(userComment=>{\r\n                                        // console.log(userComment)\r\n                                        return(\r\n                                            <h6>\r\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\r\n                                            </h6>   \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n\r\n                            <div>\r\n                                <form onSubmit={(e)=>{\r\n                                    makeComment(e.target[0].value , item._id);\r\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\r\n                                }}>                         \r\n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\r\n                                    type=\"text\"\r\n                                    placeholder=\"comments\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CategoryA;","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\category\\CategoryB.js",["62"],"import react, { useEffect, useState } from 'react';\r\n\r\nfunction CategoryB()\r\n{\r\n    const [allThePosts,setAllThePosts]=useState([]);\r\n    const categoryName=\"B\";\r\n\r\n    useEffect(()=>{\r\n        fetch(`/allposts/${categoryName}`,{\r\n            method:\"get\",\r\n            headers:{\r\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \r\n            }\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data)\r\n            setAllThePosts(data)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    },[])\r\n\r\n    function LikePost(postId)\r\n    {\r\n        fetch('/likepost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n            const newData=allThePosts.map(item=>{\r\n                if(item._id === data._id)\r\n                    return data;\r\n                else   \r\n                    return item;\r\n            })\r\n\r\n            setAllThePosts(newData);\r\n            // flag+=1;\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function UnlikePost(postId)\r\n    {\r\n        fetch('/unlikepost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n            // flag+=1;\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function DeletePost(postId)\r\n    {\r\n        fetch(`/delete/${postId}`,{\r\n            method:\"delete\",\r\n            headers:{\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data)\r\n            const newData=allThePosts.map(item=>{\r\n                    if(item._id !== data._id)\r\n                        return item\r\n                    return data\r\n            })\r\n            setAllThePosts(newData);\r\n            // flag+=1;\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function makeComment(comment,postId)\r\n    {\r\n        fetch('/comment',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                commentBody:comment,\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            // console.log(data);\r\n            const newData=allThePosts.map(item=>{\r\n                if(item._id === data._id)\r\n                    return data\r\n                else    \r\n                    return item\r\n            })\r\n            setAllThePosts(newData)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    function ForkPost(postId)\r\n    {\r\n        fetch('/forkpost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>this is Category B</h1>\r\n            {\r\n                allThePosts.map(item=>{\r\n                    // console.log(\"alltheposts\");\r\n                    // console.log(item)\r\n                    return(\r\n                        // <li><h2>{item.title}</h2></li>\r\n                        // <li><h2>{item.body}</h2></li>\r\n                        <div className=\"card\">\r\n                            <h2>{item.title}</h2>\r\n                            <h2>{item.body}</h2>\r\n                            <h4>{item.likes.length} likes</h4>\r\n\r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                LikePost(item._id)\r\n                            }}\r\n                            >Like</button>\r\n\r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                UnlikePost(item._id)\r\n                            }}\r\n                            >Unlike</button>\r\n                            \r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                DeletePost(item._id)\r\n                            }}\r\n                            >Delete</button>\r\n                            \r\n                            <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                ForkPost(item._id)\r\n                            }}\r\n                            >Fork</button>\r\n\r\n                            <h4>Previous Comments</h4>\r\n                            <div>\r\n                                {\r\n                                    item.comments.map(userComment=>{\r\n                                        // console.log(userComment)\r\n                                        return(\r\n                                            <h6>\r\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\r\n                                            </h6>   \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n\r\n                            <div>\r\n                                <form onSubmit={(e)=>{\r\n                                    makeComment(e.target[0].value , item._id);\r\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\r\n                                }}>                         \r\n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\r\n                                    type=\"text\"\r\n                                    placeholder=\"comments\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CategoryB;",["63","64"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\Home.js",[],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\CreatePost.js",["65"],"// import { useState } from \"react\";\r\nimport React , {useState} from 'react';\r\nimport M from 'materialize-css';\r\n\r\nfunction CreatePost()\r\n{\r\n    const [title,setTitle]=useState(\"\");\r\n    const [body,setBody]=useState(\"\");\r\n    const [pic,setPic]=useState(\"\")\r\n    const [category,setCategory]=useState(\"\");\r\n\r\n    function PostData()\r\n    {\r\n        fetch('/createpost',{\r\n            method:\"post\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                title,\r\n                body,\r\n                pic,\r\n                category,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"mycard\">\r\n                <div className=\"card auth-card\">\r\n                    <input\r\n                    type=\"text\"\r\n                    value={title}\r\n                    placeholder=\"Title\"\r\n                    onChange={\r\n                        function(event)\r\n                        {\r\n                            setTitle(event.target.value);\r\n                        }\r\n                    }\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"card auth-card\">\r\n                    <input\r\n                    type=\"text\"\r\n                    value={body}\r\n                    placeholder=\"Body\"\r\n                    onChange={\r\n                        function(event)\r\n                        {\r\n                            setBody(event.target.value);\r\n                        }\r\n                    }\r\n                    />\r\n                </div>\r\n                <div className=\"card auth-card\">\r\n                    <input\r\n                    type=\"file\"\r\n                    value={pic}\r\n                    placeholder=\"Picture\"\r\n                    onChange={\r\n                        function(event)\r\n                        {\r\n                            console.log(event.target.value)\r\n                            // setPic(event.target.files);\r\n                            setPic(event.target.value);\r\n                        }\r\n                    }\r\n                    />\r\n                </div>\r\n                <div className=\"card auth-card\">\r\n                    {/* need to put dropdown list here */}\r\n                    <input \r\n                    type=\"text\"\r\n                    value={category}\r\n                    placeholder=\"category\"\r\n                    onChange={(event)=>{\r\n                        console.log(event.target.value)\r\n                        setCategory(event.target.value)\r\n                    }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <button \r\n            className=\"btn\"\r\n            onClick={()=>{\r\n                PostData();\r\n            }}\r\n            >\r\n                Post\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePost;",["66","67"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\Signup.js",[],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\Navbar.js",["68","69","70","71"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\ViewPost.js",["72"],"import react, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../Toolbar.css';\r\n\r\nfunction ViewPost()\r\n{\r\n    const {postId}=useParams();\r\n    // console.log(postId)\r\n\r\n    const [postData,setPostData]=useState(null);\r\n\r\n    useEffect(()=>{\r\n        fetch(`/getPost/${postId}`,{\r\n            method:\"get\",\r\n            headers:{\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            // console.log(data.likes.length)\r\n            // console.log(typeof(data.likes))\r\n            console.log(data)\r\n            setPostData(data)\r\n            // console.log(postData.comments.length)\r\n            // console.log(typeof(postData.comments))\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    },[postId])\r\n\r\n\r\n    return(\r\n        <div>\r\n            {                                               // did this so that when postData will be available\r\n                postData?                                   // only then the further components can be accessed\r\n                <div className=\"formatDedicatedPost\">                                     \r\n                    <h1>{postData.title}</h1>\r\n                    <h3>{postData.body}</h3>\r\n                    <h5>{postData.likes.length} likes</h5>\r\n                    <div>\r\n                        {\r\n                            postData.comments.map(userComment=>{\r\n                                return(\r\n                                    <h6>\r\n                                        <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\r\n                                    </h6>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                :\r\n                <h1>! loading  </h1>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPost;",["73","74"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\App.js",["75"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\Signin.js",["76"],"C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\screens\\ForkedPost.js",["77"],"import react, { useEffect, useState, useContext } from 'react';\r\nimport {UserContext} from '../App'\r\n\r\nfunction ForkedPost()\r\n{\r\n    const [myforks,setMyforks]=useState([]);\r\n    const {state,dispatch}=useContext(UserContext)\r\n\r\n    useEffect(()=>{\r\n        fetch('/getforkpost',{\r\n            method:\"get\",\r\n            headers:{\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            // console.log(data);\r\n            setMyforks(data)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    },[])\r\n\r\n    function UnforkPost(postId)\r\n    {\r\n        fetch('/unforkpost',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            // console.log(data)\r\n            // console.log(\"unforked successfully\")\r\n            dispatch({type:\"FORK\" , payload : data.forkedPost})\r\n            localStorage.setItem(\"user\",JSON.stringify(data))\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                myforks.map(item=>{\r\n                    return(\r\n                        <div className=\"card\">\r\n                            <h1>{item.title}</h1>\r\n                            <h2>{item.body}</h2>\r\n                            <h5>{item.likes.length} likes</h5>\r\n\r\n                            {/* <button \r\n                            className=\"btn\"\r\n                            onClick={()=>{\r\n                                UnforkPost(item._id)\r\n                            }}>\r\n                                Unfork\r\n                            </button> */}\r\n\r\n                            {\r\n                                state\r\n                                ?\r\n                                    state.forkedPost.some(({_id})=>_id === item._id)\r\n                                    ?\r\n                                    <button \r\n                                    className=\"btn\"\r\n                                    onClick={()=>{\r\n                                        // console.log(\"yes\");\r\n                                        UnforkPost(item._id)\r\n                                    }}\r\n                                    >UnFork</button>\r\n                                    :\r\n                                    <h6> </h6>\r\n                                :\r\n                                <h5> !! loading </h5>\r\n                            }\r\n\r\n                            <div>\r\n                                {\r\n                                    item.comments.map(userComment=>{\r\n                                        // console.log(userComment)\r\n                                        return(\r\n                                            <h6>\r\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\r\n                                            </h6>   \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <h1>Forked page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForkedPost;","C:\\Users\\User\\Documents\\Web Development\\d_coder\\client\\src\\Reducer.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"78","replacedBy":"86"},{"ruleId":"80","replacedBy":"87"},{"ruleId":"82","severity":1,"message":"88","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":9},{"ruleId":"78","replacedBy":"89"},{"ruleId":"80","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":45,"column":54,"nodeType":"93","endLine":45,"endColumn":87},{"ruleId":"91","severity":1,"message":"92","line":46,"column":54,"nodeType":"93","endLine":46,"endColumn":87},{"ruleId":"94","severity":1,"message":"95","line":47,"column":54,"nodeType":"96","endLine":47,"endColumn":74},{"ruleId":"91","severity":1,"message":"92","line":69,"column":42,"nodeType":"93","endLine":69,"endColumn":162},{"ruleId":"82","severity":1,"message":"83","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"78","replacedBy":"97"},{"ruleId":"80","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":40,"column":5,"nodeType":"101","endLine":40,"endColumn":7,"suggestions":"102"},{"ruleId":"82","severity":1,"message":"103","line":11,"column":12,"nodeType":"84","messageId":"85","endLine":11,"endColumn":17},{"ruleId":"82","severity":1,"message":"83","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar",["104"],["105"],"'M' is defined but never used.",["104"],["105"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["104"],["105"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["106"],"'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [dispatch, history, state]",{"range":"109","text":"110"},[1270,1272],"[dispatch, history, state]"]