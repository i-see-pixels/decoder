[{"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\index.js":"1","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\App.js":"2","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Reducer.js":"3","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\MainFooter.js":"4","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Footer.js":"5","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Navbar.js":"6","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\Home.js":"7","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\ForkedPost.js":"8","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\Signup.js":"9","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\Signin.js":"10","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\landing.js":"11","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\CreatePost.js":"12","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\ViewPost.js":"13","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\category\\CategoryB.js":"14","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\blog.js":"15","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\category\\CategoryC.js":"16","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\category\\CategoryA.js":"17","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Carousel\\Item.js":"18","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\spinner.js":"19","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Carousel\\Carousel.js":"20","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\ForgotPass.js":"21"},{"size":508,"mtime":1609664056749,"results":"22","hashOfConfig":"23"},{"size":3539,"mtime":1609674984945,"results":"24","hashOfConfig":"23"},{"size":385,"mtime":1609664056746,"results":"25","hashOfConfig":"23"},{"size":2773,"mtime":1609664056743,"results":"26","hashOfConfig":"23"},{"size":2528,"mtime":1609664056740,"results":"27","hashOfConfig":"23"},{"size":4550,"mtime":1609664056745,"results":"28","hashOfConfig":"23"},{"size":13749,"mtime":1609664056782,"results":"29","hashOfConfig":"23"},{"size":3199,"mtime":1609664056754,"results":"30","hashOfConfig":"23"},{"size":2892,"mtime":1609664056786,"results":"31","hashOfConfig":"23"},{"size":3365,"mtime":1609675360508,"results":"32","hashOfConfig":"23"},{"size":567,"mtime":1609664056800,"results":"33","hashOfConfig":"23"},{"size":4733,"mtime":1609664056752,"results":"34","hashOfConfig":"23"},{"size":3322,"mtime":1609664056788,"results":"35","hashOfConfig":"23"},{"size":10777,"mtime":1609664056795,"results":"36","hashOfConfig":"23"},{"size":12488,"mtime":1609664056791,"results":"37","hashOfConfig":"23"},{"size":10777,"mtime":1609664056797,"results":"38","hashOfConfig":"23"},{"size":10777,"mtime":1609664056794,"results":"39","hashOfConfig":"23"},{"size":249,"mtime":1609664056713,"results":"40","hashOfConfig":"23"},{"size":467,"mtime":1609664056801,"results":"41","hashOfConfig":"23"},{"size":921,"mtime":1609664056711,"results":"42","hashOfConfig":"23"},{"size":934,"mtime":1609678662232,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"gy1zxu",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\index.js",[],["100","101"],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\App.js",["102"],"import { BrowserRouter, Route, useHistory } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Home from \"./screens/Home\";\nimport Signin from \"./screens/Signin\";\nimport Signup from \"./screens/Signup\";\nimport ViewPost from \"./screens/ViewPost\";\nimport CreatePost from \"./screens/CreatePost\";\nimport ForkedPost from \"./screens/ForkedPost\";\n// import NewHome from './screens/NewHome';\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport CategoryA from \"./screens/category/CategoryA\";\nimport CategoryB from \"./screens/category/CategoryB\";\nimport CategoryC from \"./screens/category/CategoryC\";\nimport { initialState, reducer } from \"./Reducer\";\nimport { createContext, useContext, useEffect, useReducer } from \"react\";\nimport Landing from \"./screens/landing\";\nimport Blog from \"./screens/blog\";\nimport MainFooter from \"./MainFooter\";\nimport ForgotPass from \"./screens/ForgotPass\";\n\nexport const UserContext = createContext();\n\nfunction Routing() {\n    const { state, dispatch } = useContext(UserContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        const user = JSON.parse(localStorage.getItem(\"user\")); //localstorage will return content in the form of\n        // string, parse function turns it into object\n        if (user) {\n            dispatch({ type: \"USER\", payload: user });\n            console.log(\"state\", state);\n            // history.push('/')\n        } else {\n            history.push(\"/signin\");\n        }\n    }, []);\n\n    return (\n        <div>\n            <Route exact path=\"/\">\n                <Landing />\n            </Route>\n            <Route exact path=\"/home\">\n                <Navbar />\n                <Home />\n                <Footer /> <MainFooter />\n            </Route>\n            <Route exact path=\"/signin\">\n                <Navbar />\n                <Signin /> <MainFooter />\n            </Route>\n            <Route exact path=\"/signup\">\n                <Navbar />\n                <Signup /> <MainFooter />\n            </Route>\n            <Route exact path=\"/forgot_pass\">\n                <Navbar />\n                <ForgotPass /> <MainFooter />\n            </Route>\n            <Route exact path=\"/create\">\n                <Navbar />\n                <CreatePost /> <MainFooter />\n            </Route>\n            <Route exact path=\"/forked\">\n                <Navbar />\n                <ForkedPost /> <MainFooter />\n            </Route>\n            <Route exact path=\"/blogs\">\n                <Navbar />\n                <Blog /> <MainFooter />\n            </Route>\n            <Route exact path=\"/categoryA\">\n                <CategoryA /> <MainFooter />\n            </Route>\n            <Route exact path=\"/categoryB\">\n                <CategoryB /> <MainFooter />\n            </Route>\n            <Route exact path=\"/categoryC\">\n                <CategoryC /> <MainFooter />\n            </Route>\n            <Route exact path=\"/viewpost/:postId\">\n                <Navbar />\n                <ViewPost />\n                <MainFooter />\n            </Route>\n        </div>\n    );\n}\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <UserContext.Provider\n            value={{\n                state: state, // value is an object\n                dispatch: dispatch,\n            }}\n        >\n            <BrowserRouter>\n                <Routing />\n            </BrowserRouter>\n        </UserContext.Provider>\n    ); // need to study about browser router\n}\n\nexport default App;\n","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Reducer.js",[],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\MainFooter.js",["103","104","105"],"import React,{useEffect, useState} from \"react\";\nimport \"./MainFooter.css\";\nimport M from 'materialize-css'\n\nfunction Footer() {\n\n  var elems=document.querySelectorAll('.modal')\n  var instances=M.Modal.init(elems);\n\n    function SubmitQuery(e)\n    {\n      e.preventDefault();\n\n        fetch('/submitQuery',{\n            \"method\":\"POST\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \"  + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                query:e.target[1].value,\n                contentIssue:e.target[0].checked\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n        })\n\n    }\n\n  return (\n    <div className=\"main-footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n\n          <div className=\"col\">\n            <h4 style={{marginTop:'10px'}}>Get in touch with us</h4>\n          </div>\n\n          <div className=\"col\">\n            \n              <a class=\"modal-trigger\" href=\"#modal5\"><i className='medium material-icons'>mail_outline</i></a>\n\n              <div id=\"modal5\" class=\"modal\" style={{width:'600px !important ' }}>\n              <form onSubmit={(e)=>{SubmitQuery(e)}}>\n                <div class=\"modal-content\" style={{background:\"gainsboro\"}}>\n                  \n                    <h4 style={{color:'darkcyan', fontSize:'xxx-large', textAlign:'center'}}>Tell us the issues you are facing</h4>\n\n                        <label>\n                          <input type=\"checkbox\" id=\"content\" name=\"content\" style={{opacity:'10', marginTop:'12px'}} />\n                          <h2 style={{margin:\"0 0 0 50px\", color:'salmon'}}>Content Issue</h2>\n                        </label>\n\n                      <textarea id=\"otherErrors\" name=\"otherErrors\" type=\"text\" style={{color: \"indigo\", font: \"larger\", height:'300px'}}\n                        placeholder=\"Mention here if there are some other errors\" />\n\n                </div>\n                <div className=\"modal-footer\" style={{background: \"white\"}}>\n                      <button class=\"modal-close btn-flat waves-effect waves-green\" type=\"submit\">Submit</button>\n                      <button class=\"modal-close btn-flat waves-effect waves-green\" type=\"button\">Close</button>\n                    </div>\n                \n                </form>\n              </div>\n            \n          </div>\n\n          \n\n        </div>\n        {/* <hr /> */}\n        <div className=\"row\">\n          <p className=\"col-sm\">\n            &copy;{new Date().getFullYear()} Pride We | All rights reserved |\n            Terms Of Service | Privacy\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Footer.js",[],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Navbar.js",["106","107","108","109","110"],"import React,{useContext} from 'react'\nimport { Link, useHistory } from 'react-router-dom';\nimport './Toolbar.css'\nimport {UserContext} from './App'\nimport { Sidenav } from 'materialize-css';\n\nfunction Toolbar()\n{\n  const {state,dispatch}=useContext(UserContext);\n  const history=useHistory();\n\n  function RenderNavbar()\n  {\n    if(state)\n    {\n      return[\n        <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/home\">Home</a></li>,\n        <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/forked\">Forked Posts</a></li>,\n        <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/blogs\">Blogs</a></li>,\n        <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/create\">Create Post</a></li>,\n        <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"#\">About</a></li>,\n        <div class=\"nav-item dropdown\">\n                    <a href=\"#\" className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\">Categories</a>\n                    <div class=\"dropdown-menu\">\n                        <a href=\"/categoryA\" className=\"dropdown-item\">CategoryA</a>\n                        <a href=\"/categoryB\" className=\"dropdown-item\">CategoryB</a>\n                        <a href=\"/categoryC\" className=\"dropdown-item\">CategoryC</a>\n                    </div>\n                </div>,\n        <li className=\"nav-item\" role=\"presentation\" className=\"nav-link\">\n        <button className=\"btn btn-primary\" type=\"button\" style={{ borderRadius: '10px', backgroundColor: '#13694d'}}\n            onClick={()=>{\n                localStorage.clear()\n                dispatch({type:\"CLEAR\"})\n                history.push('/signin')\n            }}>Logout</button>\n        </li>\n      ]\n    }\n    else\n    {\n      return[\n        <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/signin\">Signin</a></li>,\n        <li className=\"nav-item\" role=\"presentation\" style={{margin: '0 20px'}}><button className=\"btn btn-primary\" type=\"button\" style={{padding: '5px 10px', borderRadius: '10px', backgroundColor: '#FF9999'}}>\n          <Link to=\"/signup\">Signup</Link></button></li>\n      ]\n    }\n  }\n\n\t\treturn(\n\t\t\t<div>\n\t\t   <nav className=\"navbar navbar-light navbar-expand-md\" style={{height: '75px', position: 'fixed', zIndex: 10, width: '100%', backgroundColor: '#ffffff'}}>\n        <div className=\"container-fluid\"><a className=\"navbar-brand\" href=\"#\" style={{fontSize: '25px', textAlign: 'center', fontWeight: 800, color: '#13694d'}}>LOGO</a><button data-toggle=\"collapse\" className=\"navbar-toggler\" data-target=\"#navcol-1\"><span className=\"sr-only\">Toggle navigation</span><span className=\"navbar-toggler-icon\" /></button>\n          <div className=\"collapse navbar-collapse\" id=\"navcol-1\">\n            <ul className=\"nav navbar-nav d-xl-flex flex-grow-1 justify-content-end align-items-center\">\n              {/* <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/\">Home</a></li>\n              <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/forked\">Forked Posts</a></li>\n              <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/signin\">Signin</a></li>\n              <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"/create\">Create Post</a></li>\n              <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"#\">About</a></li>\n              <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"#\">Contact Us</a></li>\n              <li className=\"nav-item\" role=\"presentation\" style={{margin: '0 20px'}}><button className=\"btn btn-primary\" type=\"button\" style={{padding: '5px 10px', borderRadius: '10px', backgroundColor: '#13694d'}}><Link to=\"/signup\">Signup</Link></button></li>\n              <li className=\"nav-item\" role=\"presentation\" className=\"nav-link\">\n            <button className=\"btn btn-primary\" type=\"button\" style={{padding: '5px 10px', borderRadius: '10px', backgroundColor: '#13694d'}}\n            onClick={()=>{\n                localStorage.clear()\n                dispatch({type:\"CLEAR\"})\n                history.push('/signin')\n            }}>Logout</button>\n           </li> */}\n            <RenderNavbar/>\n            </ul>\n          </div>\n        </div>\n      </nav>\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n        </div>\n    )\n    \n}\n\n\nexport default Toolbar;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\Home.js",["111","112","113","114","115","116","117","118","119"],"import React, { useEffect, useState , useContext} from 'react';\nimport { Link } from 'react-router-dom'\nimport {UserContext} from '../App'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport Car from '../Carousel/Carousel'\nimport Item from '../Carousel/Item'\nfunction Home()\n{\n    \n    return (\n        <div className=\"home\">\n            <div className=\"image\">\n                <img className=\"img\"src=\"https://www.awarenessdays.com/wp-content/uploads/2018/09/pride-flag.png\" alt=\"\" />      \n            </div>\n           <Car></Car>\n           <div class=\"parent-flex\">\n               {/* <p className=\"Flextext\">Popular articles</p> */}\n         <div class=\"flex-item\"></div>\n          <div class=\"flex-item\"></div>\n         <div class=\"flex-item\"></div>\n           </div>\n            <Car>\n            <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n            <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n            <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n            </Car>\n        </div>\n    );\n}\n\nexport default Home;\n\n\n// const {state,dispatch}=useContext(UserContext)\n//     const [allThePosts,setAllThePosts]=useState([]);\n//     // var flag=1;\n//     // console.log(state)\n\n//     useEffect(()=>{\n//         fetch('/allposts',{\n//             // method:\"get\",\n//             headers:{\n//                 \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n//             }\n//         })\n//         .then(res=>res.json())\n//         .then((data)=>{                         // this is an array\n//             // console.log(typeof(data));\n//             setAllThePosts(data);\n//         })\n//         .catch((err)=>{\n//             console.log(err);\n//         })\n//     },[])\n\n//     function LikePost(postId)\n//     {\n//         fetch('/likepost',{\n//             method:\"put\",\n//             headers:{\n//                 \"Content-Type\":\"application/json\",\n//                 \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n//             },\n//             body:JSON.stringify({\n//                 postId,\n//             })\n//         })\n//         .then(res=>res.json())\n//         .then((data)=>{\n//             console.log(data);\n//             const newData=allThePosts.map(item=>{\n//                 if(item._id === data._id)\n//                     return data;\n//                 else   \n//                     return item;\n//             })\n\n//             setAllThePosts(newData);\n//             // flag+=1;\n//         })\n//         .catch((err)=>{\n//             console.log(err);\n//         })\n//     }\n\n//     function UnlikePost(postId)\n//     {\n//         fetch('/unlikepost',{\n//             method:\"put\",\n//             headers:{\n//                 \"Content-Type\":\"application/json\",\n//                 \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n//             },\n//             body:JSON.stringify({\n//                 postId,\n//             })\n//         })\n//         .then(res=>res.json())\n//         .then((data)=>{\n//             console.log(data);\n//             const newData=allThePosts.map(item=>{\n//                 if(item._id === data._id)\n//                     return data;\n//                 else   \n//                     return item;\n//             })\n\n//             setAllThePosts(newData);\n//             // flag+=1;\n//         })\n//         .catch((err)=>{\n//             console.log(err);\n//         })\n//     }\n\n//     function DeletePost(postId)\n//     {\n//         fetch(`/delete/${postId}`,{\n//             method:\"delete\",\n//             headers:{\n//                 \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n//             }\n//         })\n//         .then(res=>res.json())\n//         .then((data)=>{\n//             console.log(data)\n//             const newData=allThePosts.map(item=>{\n//                     if(item._id !== data._id)\n//                         return item\n//                     return data\n//             })\n//             setAllThePosts(newData);\n//             // flag+=1;\n//         })\n//         .catch((err)=>{\n//             console.log(err);\n//         })\n//     }\n\n//     function makeComment(comment,postId)\n//     {\n//         fetch('/comment',{\n//             method:\"put\",\n//             headers:{\n//                 \"Content-Type\":\"application/json\",\n//                 \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n//             },\n//             body:JSON.stringify({\n//                 commentBody:comment,\n//                 postId,\n//             })\n//         })\n//         .then(res=>res.json())\n//         .then((data)=>{\n//             // console.log(data);\n//             const newData=allThePosts.map(item=>{\n//                 if(item._id === data._id)\n//                     return data\n//                 else    \n//                     return item\n//             })\n//             setAllThePosts(newData)\n//         })\n//         .catch((err)=>{\n//             console.log(err)\n//         })\n//     }\n\n//     function ForkPost(postId)\n//     {\n//         fetch('/forkpost',{\n//             method:\"put\",\n//             headers:{\n//                 \"Content-Type\":\"application/json\",\n//                 \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n//             },\n//             body:JSON.stringify({\n//                 postId,\n//             })\n//         })\n//         .then(res=>res.json())\n//         .then(data=>{\n//             // console.log(data.forkedPost)\n//             // console.log(\"state before \",state);\n//             dispatch({type:\"FORK\" , payload : data.forkedPost})\n//             localStorage.setItem(\"user\",JSON.stringify(data))\n//             // console.log(\"state after \",state);\n//         })\n//     }\n\n//     function UnForkPost(postId)\n//     {\n//         fetch('/unforkpost',{\n//                 method:\"put\",\n//                 headers:{\n//                     \"Content-Type\":\"application/json\",\n//                     \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n//                 },\n//                 body:JSON.stringify({\n//                     postId,\n//                 })\n//             })\n//             .then(res=>res.json())\n//             .then(data=>{\n//                 // console.log(data.forkedPost)\n//                 dispatch({type:\"FORK\" , payload : data.forkedPost})\n//                 localStorage.setItem(\"user\",JSON.stringify(data))\n//             })\n//     }\n\n//                 <li><Link to=\"/categoryA\">CategoryA</Link></li>\n//                 <li><Link to=\"/categoryB\">CategoryB</Link></li>\n//                 <li><Link to=\"/categoryC\">CategoryC</Link></li>\n//                 {\n//                     allThePosts.map(item=>{\n//                         return(\n//                             // console.log(item),\n\n//                             // body: \"d\"\n//                             // category: \"C\"\n//                             // comments: []\n//                             // likes: []\n//                             // pic: \"C:\\fakepath\\wallhaven-42qee6_1366x768.png\"\n//                             // postedby: {_id: \"5fc9dbfa24626d26b8296d32\", name: \"y\"}\n//                             // title: \"d\"\n//                             // __v: 0\n//                             // _id: \"5fc9e12024626d26b8296d33\"\n//                             // __proto__: Object\n\n//                             <div className=\"card\">\n//                                 <Link to={\"/viewpost/\" + item._id }><h2>{item.title}</h2></Link>\n//                                 {/* <h2>{item._id}</h2> */}\n//                                 <h2>{item.body}</h2>\n//                                 <h4>{item.likes.length} likes</h4>\n\n//                                 <div>\n//                                 {\n//                                     item.likes.includes(state._id)\n//                                     ?\n//                                         <button \n//                                         className=\"btn\"\n//                                         onClick={()=>{\n//                                             UnlikePost(item._id)\n//                                         }}\n//                                         >Unlike</button>\n//                                     :\n//                                         <button \n//                                         className=\"btn\"\n//                                         onClick={()=>{\n//                                             LikePost(item._id)\n//                                         }}\n//                                         >Like</button>\n\n//                                 }\n\n//                                 {\n//                                     item.postedby._id === state._id\n//                                     &&\n//                                     <button \n//                                     className=\"btn\"\n//                                     onClick={()=>{\n//                                     DeletePost(item._id)\n//                                     }}\n//                                     >Delete</button>\n//                                 }\n    \n//                                 {\n                                    \n//                                     state\n//                                     ?\n//                                         // \n//                                         state.forkedPost.some(({_id})=>_id === item._id)\n//                                         ?\n//                                         <button \n//                                         className=\"btn\"\n//                                         onClick={()=>{\n//                                             // console.log(\"yes\");\n//                                             UnForkPost(item._id)\n//                                         }}\n//                                         >UnFork</button>\n//                                         :\n//                                         <button \n//                                         className=\"btn\"\n//                                         onClick={()=>{\n//                                             ForkPost(item._id)\n//                                         }}\n//                                         >Fork</button>\n\n//                                     :\n\n//                                     <h5> loading </h5>\n\n//                                 }\n\n//                                 {/* {\n//                                     state.forkedPost.includes(item._id)\n//                                     ?\n//                                     <button \n//                                     className=\"btn\"\n//                                     onClick={()=>{\n//                                         UnForkPost(item._id)\n//                                     }}\n//                                     >UnFork</button>\n//                                     :\n//                                     <button \n//                                     className=\"btn\"\n//                                     onClick={()=>{\n//                                         ForkPost(item._id)\n//                                     }}\n//                                     >Fork</button>\n//                                 }  */}\n\n//                                 {/* <button \n//                                 className=\"btn\"\n//                                 onClick={()=>{\n//                                     ForkPost(item._id)\n//                                 }}\n//                                 >Fork</button>\n                                \n//                                 <button \n//                                 className=\"btn\"\n//                                 onClick={()=>{\n//                                     UnForkPost(item._id)\n//                                 }}\n//                                 >Un Fork</button> */}\n\n\n\n//                                 </div>\n//                                 {/* <h4>Previous Comments</h4> */}\n//                                 <div>\n//                                     {\n//                                         item.comments.map(userComment=>{\n//                                             // console.log(userComment)\n//                                             return(\n//                                                 <h6>\n//                                                     <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n//                                                 </h6>   \n//                                             )\n//                                         })\n//                                     }\n//                                 </div>\n\n//                                 <div>\n//                                     <form onSubmit={(e)=>{\n//                                         makeComment(e.target[0].value , item._id);\n//                                         e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n//                                     }}>                         \n//                                         <input                  //to prevent that reloading, we have used e.preventDefault()\n//                                         type=\"text\"\n//                                         placeholder=\"comments\"\n//                                         />\n//                                     </form>\n//                                 </div>\n\n//                             </div>\n//                         )\n//                     })\n//                 }","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\ForkedPost.js",["120","121","122","123"],"import react, { useEffect, useState, useContext } from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {UserContext} from '../App'\n\nfunction ForkedPost()\n{\n    const [myforks,setMyforks]=useState([]);\n    const {state,dispatch}=useContext(UserContext)\n    const history=useHistory();\n\n    useEffect(()=>{\n        fetch('/getforkpost',{\n            method:\"get\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            setMyforks(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function UnforkPost(postId)\n    {\n        fetch('/unforkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            dispatch({type:\"FORK\" , payload : data.forkedPost})\n            localStorage.setItem(\"user\",JSON.stringify(data))\n            window.location.reload();\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    return(\n        <div>\n            {\n                <h1>All your forked posts appear here</h1>,\n                myforks.map(item=>{\n                    return(\n                        <div className=\"card\">\n                            <h1>{item.title}</h1>\n                            <img src={item.pic}/>\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            {\n                                state\n                                ?\n                                    state.forkedPost.some(({_id})=>_id === item._id)\n                                    ?\n                                    <i className=\"small material-icons\" title='Unfork this post' onClick={()=>{\n                                        UnforkPost(item._id)\n                                    }} style={{cursor:'pointer'}}>highlight_off</i>\n                                    :\n                                    <h6> </h6>\n                                :\n                                <h5> !! loading </h5>\n                            }\n\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        return(\n                                            <h4>\n                                                <span style={{fontWeight:\"700\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h4>   \n                                        )\n                                    })\n                                }\n                            </div>\n                        </div>\n                    )\n                })\n            }\n            <h1>Forked page</h1>\n        </div>\n    )\n}\n\nexport default ForkedPost;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\Signup.js",[],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\Signin.js",["124"],"import React, { useState, useContext } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { UserContext } from \"../App\";\nimport classes from \"./Signin.module.css\";\nimport M from \"materialize-css\";\n\nfunction Signin() {\n    // const [name,setName]=useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const history = useHistory();\n    const { state, dispatch } = useContext(UserContext);\n\n    function PostData() {\n        // const history=useHistory();\n        fetch(\"/signin\", {\n            method: \"post\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.error) {\n                    console.log(\"error \");\n                    console.log(data.error);\n                    M.toast({\n                        html: \"Invalid UserName or Password\",\n                        classes: \"#ce93d8 purple\",\n                        displayLength: 2000,\n                    });\n                } else {\n                    localStorage.setItem(\"jwt\", data.token);\n                    localStorage.setItem(\"user\", JSON.stringify(data.user));\n                    dispatch({ type: \"USER\", payload: data.user });\n                    console.log(\"signed in successfully\");\n                    M.toast({\n                        html: \"Signed in successfully\",\n                        classes: \"#ce93d8 purple\",\n                        displayLength: 2000,\n                    });\n                    history.push(\"/\");\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    return (\n        <div className={classes.main}>\n            <div>\n                <div className={classes.input}>\n                    <input\n                        type=\"email\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={function (event) {\n                            // console.log(event)\n                            // console.log(event.target.value)\n                            setEmail(event.target.value);\n                        }}\n                    />\n                </div>\n                <div className={classes.input}>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={function (event) {\n                            // console.log(event)\n                            // console.log(event.target.value)\n                            setPassword(event.target.value);\n                        }}\n                    />\n                </div>\n                <div className=\"fp-link input\">\n                    <Link to=\"/forgot_pass\">Forgot Password ?</Link>\n                </div>\n            </div>\n            <button className={classes.button} onClick={() => PostData()}>\n                Login\n            </button>\n            <div class=\"progress\">\n                <div class=\"determinate\" style={{ width: \"70%\" }}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default Signin;\n","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\landing.js",[],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\CreatePost.js",["125"],"// import { useState } from \"react\";\nimport React , {useEffect, useState} from 'react';\nimport M from 'materialize-css';\nimport classes from './CreatePost.module.css'\nimport Spinner from './spinner';\n\nfunction CreatePost()\n{\n    const [title,setTitle]=useState(\"\");\n    const [body,setBody]=useState(\"\");\n    const [pic,setPic]=useState(\"\")\n    const [picurl,setPicurl]=useState(\"\");\n    const [category,setCategory]=useState(\"\");\n    const [loading,setLoading]=useState(false);\n\n\n    useEffect(()=>{\n        if(picurl)\n        {\n            console.log(\"picurl=\",picurl)\n            fetch('/createpost',{\n                method:\"post\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n                },\n                body:JSON.stringify({\n                    title,\n                    body,\n                    picurl,\n                    category,\n                })\n            })\n            .then(res=>res.json())\n            .then((data)=>{\n                console.log(data);\n                setLoading(false)\n                M.toast({html:'Post created successfully',classes:'#ce93d8 purple', displayLength:2000});\n            })\n        }\n    },[picurl])\n\n    function PostImageOnCloud() \n    {\n        setLoading(true);\n        const data=new FormData();\n        data.append('file',pic);\n        data.append('upload_preset','insta-clone')\n        data.append('cloud_name','vikash0901');\n\n        fetch('https://api.cloudinary.com/v1_1/vikash0901/image/upload',{\n            method:\"post\",\n            body:data\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data);\n            setPicurl(data.url)\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    /*function PostData()\n    {\n        fetch('/createpost',{\n            method:\"post\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                title,\n                body,\n                pic,\n                category,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n        })\n    }*/\n\n    return(\n        <div className={classes.main}>\n            <div style={{textAlign:\"center\"}}>\n                <div className={classes.input}>\n                    <input\n                    type=\"text\"\n                    value={title}\n                    placeholder=\"Title\"\n                    onChange={\n                        function(event)\n                        {\n                            setTitle(event.target.value);\n                        }\n                    }\n                    />\n                </div>\n\n                <div className={classes.input}>\n                    <input\n                    type=\"text\"\n                    value={body}\n                    placeholder=\"Body\"\n                    onChange={\n                        function(event)\n                        {\n                            setBody(event.target.value);\n                        }\n                    }\n                    />\n                </div>\n                <div className={classes.input}>\n                    <input\n                    type=\"file\"\n                    placeholder=\"Picture\"\n                    onChange={\n                        function(event)\n                        {\n                            console.log(event.target.files[0])\n                            setPic(event.target.files[0]);\n                            // setPic(event.target.value);\n                        }\n                    }\n                    />\n                </div>\n                <div className={classes.input}>\n                    {/* need to put dropdown list here */}\n                    <input \n                    type=\"text\"\n                    value={category}\n                    placeholder=\"category\"\n                    onChange={(event)=>{\n                        console.log(event.target.value)\n                        setCategory(event.target.value)\n                    }}\n                    />\n                </div>\n            </div>\n\n            <button \n            className={classes.button}\n            onClick={()=>{\n                PostImageOnCloud();\n                \n            }}\n            disabled={loading}\n            >\n               {\n                   loading?\n                   <Spinner/>\n                   :\n                   <h3>Post</h3>\n               }\n            </button>\n        </div>\n    )\n}\n\nexport default CreatePost;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\ViewPost.js",["126","127","128","129","130","131","132"],"import react, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './Viewpost.css';\n\nfunction ViewPost()\n{\n    const {postId}=useParams();\n    // console.log(postId)\n\n    const [postData,setPostData]=useState(null);\n\n    useEffect(()=>{\n        fetch(`/getPost/${postId}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data.likes.length)\n            // console.log(typeof(data.likes))\n            console.log(data)\n            setPostData(data)\n            // console.log(postData.comments.length)\n            // console.log(typeof(postData.comments))\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    },[postId])\n\n\n    return(\n        <div className=\"formatDedicatedPost\">\n            {\n            postData ? \n            <div className=\"article-dual-column\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-4\" style={{margin: '100px 0 0 0'}}>\n              <div className=\"toc\">\n                <p>Categories</p>\n                <ul>\n                  <li><a href=\"#\">Catergory A</a> </li>\n                  <li><a href=\"#\">Catergory B</a></li>\n                  <li><a href=\"#\">Category C</a> </li>\n                  <li><a href=\"#\">Dolor sit amet</a> </li>\n                </ul>\n              </div><button className=\"btn btn-primary\" type=\"button\" style={{margin: '20px'}}><a href=\"/create\">Add Post</a></button>\n            </div>\n            <div className=\"col-md-7 offset-md-5\" style={{height: '510px', margin: 0}}>\n              <div className=\"intro\">\n                <h1 className=\"text-center\">{postData.title}</h1>\n                <p className=\"text-center\"><span className=\"by\">by</span> <a href=\"#\">Author Name</a>\n                <span className=\"date\">{postData.likes.length} likes</span></p>\n                <img className=\"img-fluid\" src=\"https://bit.ly/3mSWOVk\" style={{margin: 0}} />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-7 col-lg-7 offset-md-4 offset-lg-4\">\n              <div className=\"text\">\n                <p>\n                {postData.body}\n                </p>\n                <hr/>\n                <h4>Comments</h4>\n                <p>\n                                    {\n                                        postData.comments.map(userComment=>{\n                                            return(\n                                                <p>\n                                                    <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> \n                                                    {userComment.commentBody}\n                                                    <hr/>\n                                                </p>\n                                            )\n                                        })\n                                    }\n                                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    :\n    <h1>Loading</h1>\n    }\n        </div>\n    )\n}\n\nexport default ViewPost;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\category\\CategoryB.js",["133"],"import react, { useEffect, useState, useContext } from 'react';\nimport {Link}  from 'react-router-dom';\nimport {UserContext} from '../../App';      // learn this navigation\n\nfunction CategoryA()\n{\n    const [allThePosts,setAllThePosts]=useState([]);\n    const categoryName=\"B\";\n    const {state,dispatch}=useContext(UserContext)\n\n    useEffect(()=>{\n        fetch(`/allposts/${categoryName}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            setAllThePosts(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n        })\n    }\n\n    function UnForkPost(postId)\n    {\n        fetch('/unforkpost',{\n                method:\"put\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n                },\n                body:JSON.stringify({\n                    postId,\n                })\n            })\n            .then(res=>res.json())\n            .then(data=>{\n                // console.log(data.forkedPost)\n                dispatch({type:\"FORK\" , payload : data.forkedPost})\n                localStorage.setItem(\"user\",JSON.stringify(data))\n            })\n    }\n\n    return (\n        <div>\n            {\n                allThePosts.map(item=>{\n                    return(\n                        // console.log(item),\n\n                        // body: \"d\"\n                        // category: \"C\"\n                        // comments: []\n                        // likes: []\n                        // pic: \"C:\\fakepath\\wallhaven-42qee6_1366x768.png\"\n                        // postedby: {_id: \"5fc9dbfa24626d26b8296d32\", name: \"y\"}\n                        // title: \"d\"\n                        // __v: 0\n                        // _id: \"5fc9e12024626d26b8296d33\"\n                        // __proto__: Object\n\n                        <div className=\"card\">\n                            <Link to={\"/viewpost/\" + item._id }><h2>{item.title}</h2></Link>\n                            {/* <h2>{item._id}</h2> */}\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            <div>\n                            {\n                                item.likes.includes(state._id)\n                                ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        UnlikePost(item._id)\n                                    }}\n                                    >Unlike</button>\n                                :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        LikePost(item._id)\n                                    }}\n                                    >Like</button>\n\n                            }\n\n                            {\n                                item.postedby._id === state._id\n                                &&\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                DeletePost(item._id)\n                                }}\n                                >Delete</button>\n                            }\n \n                            {\n                                \n                                state\n                                ?\n                                    // \n                                    state.forkedPost.some(({_id})=>_id === item._id)\n                                    ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        // console.log(\"yes\");\n                                        UnForkPost(item._id)\n                                    }}\n                                    >UnFork</button>\n                                    :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        ForkPost(item._id)\n                                    }}\n                                    >Fork</button>\n\n                                :\n\n                                <h5> loading </h5>\n\n                            }\n\n                            {/* {\n                                state.forkedPost.includes(item._id)\n                                ?\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    UnForkPost(item._id)\n                                }}\n                                >UnFork</button>\n                                :\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    ForkPost(item._id)\n                                }}\n                                >Fork</button>\n                            }  */}\n\n                            {/* <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                ForkPost(item._id)\n                            }}\n                            >Fork</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnForkPost(item._id)\n                            }}\n                            >Un Fork</button> */}\n\n\n\n                            </div>\n                            {/* <h4>Previous Comments</h4> */}\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n\n                            <div>\n                                <form onSubmit={(e)=>{\n                                    makeComment(e.target[0].value , item._id);\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                }}>                         \n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\n                                    type=\"text\"\n                                    placeholder=\"comments\"\n                                    />\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                })\n            }\n            {/* <h1>this is Home</h1> */}\n        </div>\n    );\n}\n\nexport default CategoryA;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\blog.js",["134","135","136"],"import React, { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom'\nimport './Home.css'\nimport './blog.css'\nimport {UserContext} from '../App'\nimport Navbar from '../Navbar'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport M from 'materialize-css'\n\nfunction  Home() \n{\n    const {state,dispatch}=useContext(UserContext)\n    const [allThePosts,setAllThePosts]=useState([]);\n    const [imageLoad,setImageload]=useState(false);\n    // var flag=1;\n    // console.log(state)\n\n    useEffect(()=>{\n        fetch('/allposts',{\n            // method:\"get\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{                         // this is an array\n            // console.log(typeof(data));\n            setAllThePosts(data);\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            M.toast({html:'Post liked',classes:'#ce93d8 purple',displayLength:2000});\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            M.toast({html:'Post disliked',classes:'#ce93d8 purple',displayLength:2000});\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            window.location.reload();\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            // console.log(data.forkedPost)\n            // console.log(\"state before \",state);\n            dispatch({type:\"FORK\" , payload : data.forkedPost})\n            localStorage.setItem(\"user\",JSON.stringify(data))\n            M.toast({html:'Post forked successfully',classes:'#ce93d8 purple',displayLength:2000});\n            // console.log(\"state after \",state);\n        })\n    }\n\n    function UnForkPost(postId)\n    {\n        fetch('/unforkpost',{\n                method:\"put\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n                },\n                body:JSON.stringify({\n                    postId,\n                })\n            })\n            .then(res=>res.json())\n            .then(data=>{\n                // console.log(data.forkedPost)\n                dispatch({type:\"FORK\" , payload : data.forkedPost})\n                localStorage.setItem(\"user\",JSON.stringify(data))\n                M.toast({html:'Post unforked successfully',classes:'#ce93d8 purple', displayLength:2000});\n            })\n    }    \n    \n    function imageLoaded(params) {\n        setImageload(true);\n    }\n\n    return (\n        <div style={{marginBottom:'100px'}}>\n                {/* <li><Link to=\"/categoryA\">CategoryA</Link></li>\n                <li><Link to=\"/categoryB\">CategoryB</Link></li>\n                <li><Link to=\"/categoryC\">CategoryC</Link></li> */}\n                {\n                    allThePosts.map(item=>{\n                        return(\n                            // console.log(item),\n\n                            // body: \"d\"\n                            // category: \"C\"\n                            // comments: []\n                            // likes: []\n                            // pic: \"C:\\fakepath\\wallhaven-42qee6_1366x768.png\"\n                            // postedby: {_id: \"5fc9dbfa24626d26b8296d32\", name: \"y\"}\n                            // title: \"d\"\n                            // __v: 0\n                            // _id: \"5fc9e12024626d26b8296d33\"\n                            // __proto__: Object\n\n                            <div className=\"card\">\n                                <Link to={\"/viewpost/\" + item._id }><h2>{item.title}</h2></Link>\n                                <img src={item.pic} onLoad={()=>{imageLoaded()}}/>\n                                {!imageLoad && <h2>loading image</h2>}\n                                <h2>{item.body}</h2>\n                                <h4>{item.likes.length} likes</h4>\n\n                                <div>\n                                {\n                                    item.likes.includes(state._id)\n                                    ?\n                                        <i className=\"small material-icons\" title='Unlike' onClick={()=>{\n                                            UnlikePost(item._id)\n                                        }}>thumb_down</i>\n                                    :\n                                        <i className=\"small material-icons\" title='Like' onClick={()=>{\n                                            LikePost(item._id)\n                                        }} style={{cursor:'pointer'}}>thumb_up</i>\n\n                                }\n\n                                {\n                                    item.postedby._id === state._id\n                                    &&\n                                    <i className=\"small material-icons\" title='Delete' onClick={()=>{\n                                        DeletePost(item._id)\n                                    }} >delete</i>\n                                }\n                \n                                {\n                                    \n                                    state\n                                    ?\n                                        // \n                                        state.forkedPost.some(({_id})=>_id === item._id)\n                                        ?\n                                        <i className=\"small material-icons\" title='Unfork this post' onClick={()=>{\n                                            UnForkPost(item._id)\n                                        }} style={{cursor:'pointer'}}>highlight_off</i>\n                                        :\n                                        <i className=\"small material-icons\" title='Fork this post for future' onClick={()=>{\n                                            ForkPost(item._id)\n                                        }} style={{cursor:'pointer'}}>input</i>\n\n                                    :\n\n                                    <h5> loading </h5>\n\n                                }\n\n                                {/* {\n                                    state.forkedPost.includes(item._id)\n                                    ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        UnForkPost(item._id)\n                                    }}\n                                    >UnFork</button>\n                                    :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        ForkPost(item._id)\n                                    }}\n                                    >Fork</button>\n                                }  */}\n\n                                {/* <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    ForkPost(item._id)\n                                }}\n                                >Fork</button>\n                                \n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    UnForkPost(item._id)\n                                }}\n                                >Un Fork</button> */}\n\n\n\n                                </div>\n                                {/* <h4>Previous Comments</h4> */}\n                                <div style={{marginTop:'40px'}}>\n                                    {\n                                        item.comments.map(userComment=>{\n                                            // console.log(userComment)\n                                            return(\n                                                <h4>\n                                                    <span style={{fontWeight:\"700\"}}>{userComment.commentedBy.name} : </span> {userComment.commentBody}\n                                                </h4>   \n                                            )\n                                        })\n                                    }\n                                </div>\n\n                                <div>\n                                    <form onSubmit={(e)=>{\n                                        makeComment(e.target[0].value , item._id);\n                                        e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                    }}>                         \n                                        <input                  //to prevent that reloading, we have used e.preventDefault()\n                                        type=\"text\"\n                                        placeholder=\"comments\"\n                                        />\n                                    </form>\n                                </div>\n\n                            </div>\n                        )\n                    })\n                }\n            </div>\n    )\n}\n\nexport default Home;\n","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\category\\CategoryC.js",["137"],"import react, { useEffect, useState, useContext } from 'react';\nimport {Link}  from 'react-router-dom';\nimport {UserContext} from '../../App';      // learn this navigation\n\nfunction CategoryA()\n{\n    const [allThePosts,setAllThePosts]=useState([]);\n    const categoryName=\"C\";\n    const {state,dispatch}=useContext(UserContext)\n\n    useEffect(()=>{\n        fetch(`/allposts/${categoryName}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            setAllThePosts(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n        })\n    }\n\n    function UnForkPost(postId)\n    {\n        fetch('/unforkpost',{\n                method:\"put\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n                },\n                body:JSON.stringify({\n                    postId,\n                })\n            })\n            .then(res=>res.json())\n            .then(data=>{\n                // console.log(data.forkedPost)\n                dispatch({type:\"FORK\" , payload : data.forkedPost})\n                localStorage.setItem(\"user\",JSON.stringify(data))\n            })\n    }\n\n    return (\n        <div>\n            {\n                allThePosts.map(item=>{\n                    return(\n                        // console.log(item),\n\n                        // body: \"d\"\n                        // category: \"C\"\n                        // comments: []\n                        // likes: []\n                        // pic: \"C:\\fakepath\\wallhaven-42qee6_1366x768.png\"\n                        // postedby: {_id: \"5fc9dbfa24626d26b8296d32\", name: \"y\"}\n                        // title: \"d\"\n                        // __v: 0\n                        // _id: \"5fc9e12024626d26b8296d33\"\n                        // __proto__: Object\n\n                        <div className=\"card\">\n                            <Link to={\"/viewpost/\" + item._id }><h2>{item.title}</h2></Link>\n                            {/* <h2>{item._id}</h2> */}\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            <div>\n                            {\n                                item.likes.includes(state._id)\n                                ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        UnlikePost(item._id)\n                                    }}\n                                    >Unlike</button>\n                                :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        LikePost(item._id)\n                                    }}\n                                    >Like</button>\n\n                            }\n\n                            {\n                                item.postedby._id === state._id\n                                &&\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                DeletePost(item._id)\n                                }}\n                                >Delete</button>\n                            }\n \n                            {\n                                \n                                state\n                                ?\n                                    // \n                                    state.forkedPost.some(({_id})=>_id === item._id)\n                                    ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        // console.log(\"yes\");\n                                        UnForkPost(item._id)\n                                    }}\n                                    >UnFork</button>\n                                    :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        ForkPost(item._id)\n                                    }}\n                                    >Fork</button>\n\n                                :\n\n                                <h5> loading </h5>\n\n                            }\n\n                            {/* {\n                                state.forkedPost.includes(item._id)\n                                ?\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    UnForkPost(item._id)\n                                }}\n                                >UnFork</button>\n                                :\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    ForkPost(item._id)\n                                }}\n                                >Fork</button>\n                            }  */}\n\n                            {/* <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                ForkPost(item._id)\n                            }}\n                            >Fork</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnForkPost(item._id)\n                            }}\n                            >Un Fork</button> */}\n\n\n\n                            </div>\n                            {/* <h4>Previous Comments</h4> */}\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n\n                            <div>\n                                <form onSubmit={(e)=>{\n                                    makeComment(e.target[0].value , item._id);\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                }}>                         \n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\n                                    type=\"text\"\n                                    placeholder=\"comments\"\n                                    />\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                })\n            }\n            {/* <h1>this is Home</h1> */}\n        </div>\n    );\n}\n\nexport default CategoryA;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\category\\CategoryA.js",["138"],"import react, { useEffect, useState, useContext } from 'react';\nimport {Link}  from 'react-router-dom';\nimport {UserContext} from '../../App';      // learn this navigation\n\nfunction CategoryA()\n{\n    const [allThePosts,setAllThePosts]=useState([]);\n    const categoryName=\"A\";\n    const {state,dispatch}=useContext(UserContext)\n\n    useEffect(()=>{\n        fetch(`/allposts/${categoryName}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            setAllThePosts(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n        })\n    }\n\n    function UnForkPost(postId)\n    {\n        fetch('/unforkpost',{\n                method:\"put\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n                },\n                body:JSON.stringify({\n                    postId,\n                })\n            })\n            .then(res=>res.json())\n            .then(data=>{\n                // console.log(data.forkedPost)\n                dispatch({type:\"FORK\" , payload : data.forkedPost})\n                localStorage.setItem(\"user\",JSON.stringify(data))\n            })\n    }\n\n    return (\n        <div>\n            {\n                allThePosts.map(item=>{\n                    return(\n                        // console.log(item),\n\n                        // body: \"d\"\n                        // category: \"C\"\n                        // comments: []\n                        // likes: []\n                        // pic: \"C:\\fakepath\\wallhaven-42qee6_1366x768.png\"\n                        // postedby: {_id: \"5fc9dbfa24626d26b8296d32\", name: \"y\"}\n                        // title: \"d\"\n                        // __v: 0\n                        // _id: \"5fc9e12024626d26b8296d33\"\n                        // __proto__: Object\n\n                        <div className=\"card\">\n                            <Link to={\"/viewpost/\" + item._id }><h2>{item.title}</h2></Link>\n                            {/* <h2>{item._id}</h2> */}\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            <div>\n                            {\n                                item.likes.includes(state._id)\n                                ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        UnlikePost(item._id)\n                                    }}\n                                    >Unlike</button>\n                                :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        LikePost(item._id)\n                                    }}\n                                    >Like</button>\n\n                            }\n\n                            {\n                                item.postedby._id === state._id\n                                &&\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                DeletePost(item._id)\n                                }}\n                                >Delete</button>\n                            }\n \n                            {\n                                \n                                state\n                                ?\n                                    // \n                                    state.forkedPost.some(({_id})=>_id === item._id)\n                                    ?\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        // console.log(\"yes\");\n                                        UnForkPost(item._id)\n                                    }}\n                                    >UnFork</button>\n                                    :\n                                    <button \n                                    className=\"btn\"\n                                    onClick={()=>{\n                                        ForkPost(item._id)\n                                    }}\n                                    >Fork</button>\n\n                                :\n\n                                <h5> loading </h5>\n\n                            }\n\n                            {/* {\n                                state.forkedPost.includes(item._id)\n                                ?\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    UnForkPost(item._id)\n                                }}\n                                >UnFork</button>\n                                :\n                                <button \n                                className=\"btn\"\n                                onClick={()=>{\n                                    ForkPost(item._id)\n                                }}\n                                >Fork</button>\n                            }  */}\n\n                            {/* <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                ForkPost(item._id)\n                            }}\n                            >Fork</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnForkPost(item._id)\n                            }}\n                            >Un Fork</button> */}\n\n\n\n                            </div>\n                            {/* <h4>Previous Comments</h4> */}\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n\n                            <div>\n                                <form onSubmit={(e)=>{\n                                    makeComment(e.target[0].value , item._id);\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                }}>                         \n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\n                                    type=\"text\"\n                                    placeholder=\"comments\"\n                                    />\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                })\n            }\n            {/* <h1>this is Home</h1> */}\n        </div>\n    );\n}\n\nexport default CategoryA;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Carousel\\Item.js",[],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\spinner.js",[],"C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\Carousel\\Carousel.js",["139","140","141","142","143","144","145"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Carousel from \"react-elastic-carousel\";\nimport Item from \"./Item\";\nimport \"./styles.css\";\n\nconst breakPoints = [\n  { width: 1, itemsToShow: 1 },\n  { width: 1, itemsToShow: 1 },\n  { width: 1, itemsToShow: 1 },\n  { width: 1200, itemsToShow: 4 },\n];\n\nfunction App() {\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}>Mission/Vission</h1>\n      <div className=\"App\">\n        <Carousel breakPoints={breakPoints}>\n        <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n        <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n        <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n        <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n        <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n        <Item><img src=\"https://bit.ly/2KHkuic\" /> </Item>  \n        </Carousel>\n      </div>\n    </>\n  );\n}\n\nexport default App;","C:\\Users\\Siddhant\\Desktop\\Projects\\decoder\\client\\src\\screens\\ForgotPass.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":39,"column":8,"nodeType":"152","endLine":39,"endColumn":10,"suggestions":"153"},{"ruleId":"154","severity":1,"message":"155","line":1,"column":15,"nodeType":"156","messageId":"157","endLine":1,"endColumn":24},{"ruleId":"154","severity":1,"message":"158","line":1,"column":26,"nodeType":"156","messageId":"157","endLine":1,"endColumn":34},{"ruleId":"154","severity":1,"message":"159","line":8,"column":7,"nodeType":"156","messageId":"157","endLine":8,"endColumn":16},{"ruleId":"154","severity":1,"message":"160","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":17},{"ruleId":"161","severity":1,"message":"162","line":21,"column":54,"nodeType":"163","endLine":21,"endColumn":87},{"ruleId":"161","severity":1,"message":"162","line":23,"column":21,"nodeType":"163","endLine":23,"endColumn":93},{"ruleId":"164","severity":1,"message":"165","line":30,"column":54,"nodeType":"166","endLine":30,"endColumn":74},{"ruleId":"161","severity":1,"message":"162","line":53,"column":42,"nodeType":"163","endLine":53,"endColumn":162},{"ruleId":"154","severity":1,"message":"155","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"158","line":1,"column":28,"nodeType":"156","messageId":"157","endLine":1,"endColumn":36},{"ruleId":"154","severity":1,"message":"167","line":1,"column":39,"nodeType":"156","messageId":"157","endLine":1,"endColumn":49},{"ruleId":"154","severity":1,"message":"168","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":14},{"ruleId":"154","severity":1,"message":"169","line":3,"column":9,"nodeType":"156","messageId":"157","endLine":3,"endColumn":20},{"ruleId":"154","severity":1,"message":"170","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":24,"column":19,"nodeType":"163","endLine":24,"endColumn":55},{"ruleId":"171","severity":1,"message":"172","line":25,"column":19,"nodeType":"163","endLine":25,"endColumn":55},{"ruleId":"171","severity":1,"message":"172","line":26,"column":19,"nodeType":"163","endLine":26,"endColumn":55},{"ruleId":"154","severity":1,"message":"173","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":13},{"ruleId":"154","severity":1,"message":"174","line":9,"column":11,"nodeType":"156","messageId":"157","endLine":9,"endColumn":18},{"ruleId":"175","severity":1,"message":"176","line":54,"column":59,"nodeType":"177","messageId":"178","endLine":54,"endColumn":60},{"ruleId":"171","severity":1,"message":"172","line":59,"column":29,"nodeType":"163","endLine":59,"endColumn":50},{"ruleId":"154","severity":1,"message":"179","line":12,"column":13,"nodeType":"156","messageId":"157","endLine":12,"endColumn":18},{"ruleId":"150","severity":1,"message":"180","line":41,"column":7,"nodeType":"152","endLine":41,"endColumn":15,"suggestions":"181"},{"ruleId":"154","severity":1,"message":"173","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":13},{"ruleId":"161","severity":1,"message":"162","line":45,"column":23,"nodeType":"163","endLine":45,"endColumn":35},{"ruleId":"161","severity":1,"message":"162","line":46,"column":23,"nodeType":"163","endLine":46,"endColumn":35},{"ruleId":"161","severity":1,"message":"162","line":47,"column":23,"nodeType":"163","endLine":47,"endColumn":35},{"ruleId":"161","severity":1,"message":"162","line":48,"column":23,"nodeType":"163","endLine":48,"endColumn":35},{"ruleId":"161","severity":1,"message":"162","line":55,"column":75,"nodeType":"163","endLine":55,"endColumn":87},{"ruleId":"171","severity":1,"message":"172","line":57,"column":17,"nodeType":"163","endLine":57,"endColumn":95},{"ruleId":"154","severity":1,"message":"173","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":13},{"ruleId":"154","severity":1,"message":"182","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":14},{"ruleId":"154","severity":1,"message":"170","line":8,"column":10,"nodeType":"156","messageId":"157","endLine":8,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":223,"column":33,"nodeType":"163","endLine":223,"endColumn":83},{"ruleId":"154","severity":1,"message":"173","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":13},{"ruleId":"154","severity":1,"message":"173","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":13},{"ruleId":"154","severity":1,"message":"183","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":20,"column":15,"nodeType":"163","endLine":20,"endColumn":51},{"ruleId":"171","severity":1,"message":"172","line":21,"column":15,"nodeType":"163","endLine":21,"endColumn":51},{"ruleId":"171","severity":1,"message":"172","line":22,"column":15,"nodeType":"163","endLine":22,"endColumn":51},{"ruleId":"171","severity":1,"message":"172","line":23,"column":15,"nodeType":"163","endLine":23,"endColumn":51},{"ruleId":"171","severity":1,"message":"172","line":24,"column":15,"nodeType":"163","endLine":24,"endColumn":51},{"ruleId":"171","severity":1,"message":"172","line":25,"column":15,"nodeType":"163","endLine":25,"endColumn":51},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["186"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'instances' is assigned a value but never used.","'Sidenav' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useContext' is defined but never used.","'Link' is defined but never used.","'UserContext' is defined but never used.","'Carousel' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'react' is defined but never used.","'history' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'body', 'category', and 'title'. Either include them or remove the dependency array.",["187"],"'Navbar' is defined but never used.","'ReactDOM' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [dispatch, history, state]",{"range":"192","text":"193"},"Update the dependencies array to be: [body, category, picurl, title]",{"range":"194","text":"195"},[1510,1512],"[dispatch, history, state]",[1265,1273],"[body, category, picurl, title]"]